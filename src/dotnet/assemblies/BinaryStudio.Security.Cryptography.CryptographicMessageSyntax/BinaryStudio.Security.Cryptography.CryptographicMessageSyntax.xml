<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BinaryStudio.Security.Cryptography.CryptographicMessageSyntax</name>
    </assembly>
    <members>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsAttribute">
             [RFC5652]
            
             Attribute ::= SEQUENCE
             {
               attrType   OBJECT IDENTIFIER,
               attrValues SET OF AttributeValue
             }
            
             AttributeValue ::= ANY
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsAttribute.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentTypeAttribute">
             {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 3}
             {1.2.840.113549.1.9.3}
             [RFC5652]
            
             ContentType ::= OBJECT IDENTIFIER
            
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessageDigestAttribute">
             {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 4}
             {1.2.840.113549.1.9.4}
            
             MessageDigest ::= OCTET STRING
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSigningCertificateV2Attribute">
             {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) id-aa(2) id-aa-signingCertificateV2(47)}
             {1.2.840.113549.1.9.16.2.47}
             {/ISO/Member-Body/US/113549/1/9/16/2/47}
             RFC5126
             SigningCertificateV2 ::=  SEQUENCE
             {
               certs        SEQUENCE OF ESSCertIDv2,
               policies     SEQUENCE OF PolicyInformation OPTIONAL
             }
            
             ESSCertIDv2 ::=  SEQUENCE
             {
               hashAlgorithm           AlgorithmIdentifier DEFAULT {algorithm id-sha256},
               certHash                Hash,
               issuerSerial            IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
             IssuerSerial ::= SEQUENCE
             {
               issuer                   GeneralNames,
               serialNumber             CertificateSerialNumber
             }
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSigningTimeAttribute">
             {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 5}
             {1.2.840.113549.1.9.5}
            
             SigningTime ::= Time
             Time ::= CHOICE
             {
               utcTime UTCTime,
               generalizedTime GeneralizedTime
             }
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.EssCertificateIdentifier">
            ESSCertID ::=  SEQUENCE
            {
              certHash                 Hash,
              issuerSerial             IssuerSerial OPTIONAL
            }
            Hash ::= OCTET STRING -- SHA1 hash of entire certificate
            IssuerSerial ::= SEQUENCE
            {
              issuer                   GeneralNames,
              serialNumber             CertificateSerialNumber
            }
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.EssSigningCertificateAttribute">
             {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) smime(16) id-aa(2) 12}
             {1.2.840.113549.1.9.16.2.12}
            
             SigningCertificate ::=  SEQUENCE
             {
               certs        SEQUENCE OF ESSCertID,
               policies     SEQUENCE OF PolicyInformation OPTIONAL
             }
            
             ESSCertID ::=  SEQUENCE
             {
               certHash                 Hash,
               issuerSerial             IssuerSerial OPTIONAL
             }
             Hash ::= OCTET STRING -- SHA1 hash of entire certificate
             IssuerSerial ::= SEQUENCE
             {
               issuer                   GeneralNames,
               serialNumber             CertificateSerialNumber
             }
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsAlgorithmIdentifier">
            <summary>
            
            </summary>
            <remarks>
            <div>
            <img src="data:image/svg+xml;base64, " width="626" height="175"/></div>
            </remarks>
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo">
            <summary>
            The <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo" /> class represents the CMS ContentInfo
            data structure as defined in the CMS standards document.<br/>This data
            structure is the basis for all CMS messages.
            </summary>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo.#ctor(BinaryStudio.Security.Cryptography.AbstractSyntaxNotation.Asn1Object)">
            <summary>
            Creates an instance of the <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo"/> class by using an ASN1 object as the data.
            </summary>
            <param name="source">An ASN1 object that represents the data from which to create the <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo"/> object.</param>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsIssuerAndSerialNumber.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage">
            <summary>
            <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> class represents a CMS structure.
            For additional information, see <a href="https://tools.ietf.org/html/rfc5652">RFC 5652</a>.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.ContentInfo">
            <summary>
            This is the associated content. The type of content can be determined uniquely by <see cref="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.ContentType"/>.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.ContentType">
            <summary>
            <see cref="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.ContentType"/> indicates the type of the associated content. It is
            an object identifier; it is a unique string of integers assigned
            by an authority that defines the content type.
            </summary>
            <remarks>
            <table style="font-family: Consolas;width:100%;border-collapse:collapSe;border:none;mso-border-alt:solid windowtext .5pt;mso-yfti-tbllook:1184;mso-padding-alt:0cm 5.4pt 0cm 5.4pt">
              <tr>
                 <td style="border:solid windowtext 1.0pt;mso-border-alt:solid windowtext .5pt;padding:0cm;">type</td>
                 <td style="border:solid windowtext 1.0pt;mso-border-alt:solid windowtext .5pt;padding:0cm;">oid</td>
                 <td style="border:solid windowtext 1.0pt;mso-border-alt:solid windowtext .5pt;padding:0cm;">class</td>
              </tr>
              <tr>
                 <td>data</td>
                 <td>1.2.840.113549.1.7.1</td>
                 <td><see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsDataContentInfo"/></td>
              </tr>
              <tr>
                 <td>signed-data</td>
                 <td>1.2.840.113549.1.7.2</td>
                 <td><see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo"/></td>
              </tr>
              <tr>
                 <td>enveloped-data</td>
                 <td>1.2.840.113549.1.7.3</td>
                 <td><see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsEnvelopedDataContentInfo"/></td>
              </tr>
              <tr>
                 <td>digested-data</td>
                 <td>1.2.840.113549.1.7.5</td>
                 <td><see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsDigestedDataContentInfo"/></td>
              </tr>
              <tr>
                 <td>encrypted-data</td>
                 <td>1.2.840.113549.1.7.6</td>
                 <td><see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsEncryptedDataContentInfo"/></td>
              </tr>
            </table>
            </remarks>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.#ctor(System.Byte[])">
            <summary>
            Constructs new instance of <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> class by using an array of byte values as the content data.
            </summary>
            <param name="content">An array of byte values that represents the data from which to create the <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> object.</param>
            <x:block xmlns:x="http://xmldoc.schemas.helix.global" x:lang="ru-RU">
              <summary>
              Constructs new instance of <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> class by using an array of byte values as the content data.
              </summary>
              <param name="content">Массив байт из которых будет сформировано содержимое объекта <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/>.</param>
            </x:block>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.#ctor(BinaryStudio.Security.Cryptography.AbstractSyntaxNotation.Asn1Object)">
            <summary>
            Constructs new instance of <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> class by using an ASN1 object as the source data.
            </summary>
            <param name="source">An ASN1 object that represents the data from which to create the <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage"/> object.</param>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessage.GetService(System.Type)">
            <summary>Gets the service object of the specified type.</summary>
            <param name="service">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="service"/>.-or- null if there is no service object of type <paramref name="service"/>.</returns>
            <filterpriority>2</filterpriority>
            
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo">
            <summary>
            The <see cref="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsContentInfo" /> class represents the <a href="https://datatracker.ietf.org/doc/html/rfc5652#section-5.1">signed-data</a> CMS content.
            <br/>The signed-data content type shall have ASN.1 type SignedData:
            <pre style="font-family: Consolas">
              SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT RevocationInfoChoices OPTIONAL,
                signerInfos SignerInfos
              }
              DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
              SignerInfos ::= SET OF SignerInfo
            </pre>
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.Version">
            <summary>
            Gives a syntax version number, for compatibility
            with future revisions of this specification.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.DigestAlgorithms">
            <summary>
            A collection of message digest algorithm identifiers.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.Certificates">
            <summary>
            A collection of certificates.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.CertificateRevocationList">
            <summary>
            A collection of certificate revocation lists.
            </summary>
        </member>
        <member name="P:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.Signers">
            <summary>
            Retrieves the <see cref="T:System.Collections.Generic.ISet`1"/> collection associated with the CMS message.
            </summary>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignedDataContentInfo.GetService(System.Type)">
            <summary>Gets the service object of the specified type.</summary>
            <param name="service">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="service"/>.-or- null if there is no service object of type <paramref name="service"/>.</returns>
            <filterpriority>2</filterpriority>
            
        </member>
        <member name="T:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignerInfo">
             [RFC5652]
             SignerInfo ::= SEQUENCE
             {
               version            CMSVersion,
               sid                SignerIdentifier,
               digestAlgorithm    DigestAlgorithmIdentifier,
               signedAttrs        [0] IMPLICIT SignedAttributes OPTIONAL,
               signatureAlgorithm SignatureAlgorithmIdentifier,
               signature          SignatureValue,
               unsignedAttrs      [1] IMPLICIT UnsignedAttributes OPTIONAL
             }
            
             SignerIdentifier ::= CHOICE
             {
               issuerAndSerialNumber IssuerAndSerialNumber,
               subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SignedAttributes   ::= SET SIZE (1..MAX) OF Attribute
             UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             Attribute ::= SEQUENCE
             {
               attrType   OBJECT IDENTIFIER,
               attrValues SET OF AttributeValue
             }
            
             AttributeValue ::= ANY
             SignatureValue ::= OCTET STRING
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSignerInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsAttributeCollectionTypeConverter.GetPropertiesInternal(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or <see langword="null"/> if there are no properties.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessageDigestTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports properties, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns><see langword="true"/> if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessageDigestTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessageDigestTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value" /> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsMessageTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports properties, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns> <see langword="true"/> if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSerialNumberTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports properties, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns><see langword="true"/> if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSerialNumberTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.CmsSerialNumberTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.OidTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Returns whether this object supports properties, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns><see langword="true"/> if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.OidTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns><see langword="true"/> if this converter can perform the conversion; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BinaryStudio.Security.Cryptography.CryptographicMessageSyntax.OidTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If <see langword="null" /> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
    </members>
</doc>
