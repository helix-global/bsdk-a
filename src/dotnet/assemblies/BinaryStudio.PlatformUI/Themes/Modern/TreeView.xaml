<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:e="clr-namespace:BinaryStudio.PlatformUI.Controls"
                    xmlns:platformUi="clr-namespace:BinaryStudio.PlatformUI">
  <platformUi:MarginFromLeft x:Key="MarginFromLeft"/>
  <Style TargetType="{x:Type TreeView}" x:Key="{x:Type TreeView}">
    <Setter Property="Background" Value="{DynamicResource WindowBrushKey}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkBrushKey}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource ControlTextBrushKey}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"
                  Background="{TemplateBinding Background}">
            <ScrollViewer x:Name="ScrollViewer"
                          Background="Transparent"
                          CanContentScroll="false" Focusable="false"
                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                          Padding="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
              <ItemsPresenter Canvas.Left="-16"/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ControlBrushKey}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TreeViewItem}" x:Key="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="1,0,0,0"/>
    <Setter Property="Foreground" Value="{DynamicResource ControlTextBrushKey}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="IsExpanded" Value="{Binding IsExpanded,Mode=TwoWay}"/>
    <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=TwoWay}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0" Height="Auto">
              <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Name="OuterBorder">
                <DockPanel Name="DockPanel"
                           LastChildFill="True"
                           Margin="{Binding RelativeSource={RelativeSource AncestorType=ItemsPresenter},Path=(Canvas.Left),Converter={StaticResource MarginFromLeft}}">
                  <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                DockPanel.Dock="Left">
                    <ToggleButton.Style>
                      <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="Width" Value="16"/>
                        <Setter Property="Height" Value="16"/>
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                              <Border Background="Transparent" Height="16" Padding="0" Width="16">
                                <Path x:Name="ExpandPath" Data="M 0 0 L 2.5 2.5 L 0 5 Z"
                                      Fill="{DynamicResource ControlTextBrushKey}"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{DynamicResource ControlTextBrushKey}"/>
                              </Border>
                              <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                  <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                      <RotateTransform Angle="45" CenterX="0" CenterY="4"/>
                                    </Setter.Value>
                                  </Setter>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ControlTextBrushKey}"/>
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ControlTextBrushKey}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource HighlightBrushKey}"/>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource HighlightBrushKey}"/>
                                </Trigger>
                                <MultiTrigger>
                                  <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                  </MultiTrigger.Conditions>
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemTreeArrowMouseOverCheckedStrokeBrushKey}"/>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemTreeArrowMouseOverCheckedFillBrushKey}"/>
                                </MultiTrigger>
                              </ControlTemplate.Triggers>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </ToggleButton.Style>
                  </ToggleButton>
                  <Border Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                    <ContentPresenter x:Name="PART_Header"
                                      ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                  </Border>
                </DockPanel>
              </Border>
            </Grid>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Canvas.Left="{Binding ElementName=DockPanel,Path=Margin.Left}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True" SourceName="OuterBorder">
              <Setter Property="Background" Value="{DynamicResource HighlightLightLightBrushKey}"/>
              <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrushKey}"/>
            </Trigger>
            <Trigger Property="IsExpanded" Value="False">
              <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkDarkBrushKey}"/>
              <Setter Property="Background"  Value="{DynamicResource InactiveBorderBrushKey}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background"  Value="{DynamicResource HighlightLightBrushKey}"/>
              <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrushKey}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource GrayTextBrushKey}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!--<Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>-->
  </Style>
</ResourceDictionary>