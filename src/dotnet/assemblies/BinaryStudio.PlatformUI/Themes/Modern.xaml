<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:u="clr-namespace:BinaryStudio.PlatformUI">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/PresentationFramework.Classic;component/Themes/Classic.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/ProgressBar.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/HexBox.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/DataGrid.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/TreeView.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/ScrollViewer.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/TabControl.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/Menu.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/TextBox.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/ListBox.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/Button.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/StatusBar.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/Frame.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Controls/StandardControls/ToolBar.xaml"/>
    <ResourceDictionary Source="/BinaryStudio.PlatformUI;component/Themes/Geometries.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <SolidColorBrush x:Key="Accent3BrushKey"                        Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}"/>
  <SolidColorBrush x:Key="ActiveBorderBrushKey"                   Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}"/>
  <SolidColorBrush x:Key="ActiveCaptionBrushKey"                  Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}"/>
  <SolidColorBrush x:Key="ActiveCaptionTextBrushKey"              Color="{DynamicResource {x:Static SystemColors.ActiveCaptionTextColorKey}}"/>
  <SolidColorBrush x:Key="AppWorkspaceBrushKey"                   Color="{DynamicResource {x:Static SystemColors.AppWorkspaceColorKey}}"/>
  <SolidColorBrush x:Key="ControlBrushKey"                        Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
  <SolidColorBrush x:Key="ControlDarkBrushKey"                    Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}"/>
  <SolidColorBrush x:Key="ControlDarkDarkBrushKey"                Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}"/>
  <SolidColorBrush x:Key="ControlLightBrushKey"                   Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
  <SolidColorBrush x:Key="ControlLightLightBrushKey"              Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}"/>
  <SolidColorBrush x:Key="ControlTextBrushKey"                    Color="{DynamicResource {x:Static SystemColors.ControlTextColorKey}}"/>
  <SolidColorBrush x:Key="DesktopBrushKey"                        Color="{DynamicResource {x:Static SystemColors.DesktopColorKey}}"/>
  <SolidColorBrush x:Key="GradientActiveCaptionBrushKey"          Color="{DynamicResource {x:Static SystemColors.GradientActiveCaptionColorKey}}"/>
  <SolidColorBrush x:Key="GradientInactiveCaptionBrushKey"        Color="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionColorKey}}"/>
  <SolidColorBrush x:Key="GrayTextBrushKey"                       Color="{DynamicResource {x:Static SystemColors.GrayTextColorKey}}"/>
  <SolidColorBrush x:Key="HighlightBrushKey"                      Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
  <SolidColorBrush x:Key="HighlightLightBrushKey"                 Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" Opacity="0.50"/>
  <SolidColorBrush x:Key="HighlightLightLightBrushKey"            Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" Opacity="0.25"/>
  <SolidColorBrush x:Key="HighlightTextBrushKey"                  Color="{DynamicResource {x:Static SystemColors.HighlightTextColorKey}}"/>
  <SolidColorBrush x:Key="HotTrackBrushKey"                       Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}"/>
  <SolidColorBrush x:Key="InactiveBorderBrushKey"                 Color="{DynamicResource {x:Static SystemColors.InactiveBorderColorKey}}"/>
  <SolidColorBrush x:Key="InactiveCaptionBrushKey"                Color="{DynamicResource {x:Static SystemColors.InactiveCaptionColorKey}}"/>
  <SolidColorBrush x:Key="InactiveCaptionTextBrushKey"            Color="{DynamicResource {x:Static SystemColors.InactiveCaptionTextColorKey}}"/>
  <SolidColorBrush x:Key="InactiveSelectionHighlightBrushKey"     Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
  <SolidColorBrush x:Key="InactiveSelectionHighlightTextBrushKey" Color="{DynamicResource {x:Static SystemColors.InactiveCaptionTextColorKey}}"/>
  <SolidColorBrush x:Key="InfoBrushKey"                           Color="{DynamicResource {x:Static SystemColors.InfoColorKey}}"/>
  <SolidColorBrush x:Key="InfoTextBrushKey"                       Color="{DynamicResource {x:Static SystemColors.InfoTextColorKey}}"/>
  <SolidColorBrush x:Key="MenuBrushKey"                           Color="{DynamicResource {x:Static SystemColors.MenuColorKey}}"/>
  <SolidColorBrush x:Key="MenuBarBrushKey"                        Color="{DynamicResource {x:Static SystemColors.MenuBarColorKey}}"/>
  <SolidColorBrush x:Key="MenuHighlightBrushKey"                  Color="{DynamicResource {x:Static SystemColors.MenuHighlightColorKey}}"/>
  <SolidColorBrush x:Key="MenuTextBrushKey"                       Color="{DynamicResource {x:Static SystemColors.MenuTextColorKey}}"/>
  <SolidColorBrush x:Key="ScrollBarBrushKey"                      Color="{DynamicResource {x:Static SystemColors.ScrollBarColorKey}}"/>
  <SolidColorBrush x:Key="WindowBrushKey"                         Color="{DynamicResource {x:Static SystemColors.WindowColorKey}}"/>
  <SolidColorBrush x:Key="WindowFrameBrushKey"                    Color="{DynamicResource {x:Static SystemColors.WindowFrameColorKey}}"/>
  <SolidColorBrush x:Key="WindowTextBrushKey"                     Color="{DynamicResource {x:Static SystemColors.WindowTextColorKey}}"/>
  <SolidColorBrush x:Key="SelectionBrush"                         Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
  <SolidColorBrush x:Key="AccentGreenBrushKey"                    Color="#FF388A34"/>
  <SolidColorBrush x:Key="AccentRedBrushKey"                      Color="#FFA1260D"/>
  <SolidColorBrush x:Key="AccentBlueBrushKey"                     Color="#FF00539C"/>
  <SolidColorBrush x:Key="AccentLightBlueBrushKey"                Color="#FF7ca6f2"/>
  <SolidColorBrush x:Key="AccentLightGreenBrushKey"               Color="#FF68cc74"/>
  <SolidColorBrush x:Key="AccentOrangeBrushKey"                   Color="#FFC27D1A"/>
  <SolidColorBrush x:Key="AccentPictureBrushKey"                  Color="#FF414141"/>
  <SolidColorBrush x:Key="AccentPictureOutlineBrushKey"           Color="#FFF5F5F5"/>
  <SolidColorBrush x:Key="ScrollBarBackgroundBrushKey"                Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"/>
  <SolidColorBrush x:Key="ScrollBarDisabledBackgroundBrushKey"        Color="{DynamicResource {x:Static SystemColors.InactiveBorderColorKey}}"/>
  <SolidColorBrush x:Key="ScrollBarButtonMouseOverBackgroundBrushKey" Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}" Opacity="0.2"/>
  <SolidColorBrush x:Key="ScrollBarThumbBackgroundBrushKey"           Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
  <SolidColorBrush x:Key="ScrollBarThumbMouseOverBackgroundBrushKey"  Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}"/>
  <SolidColorBrush x:Key="ScrollBarThumbDraggingBackgroundBrushKey"   Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}"/>
  <SolidColorBrush x:Key="TabItemMouseOverBackgroundBrushKey"         Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}" Opacity="0.2"/>
  <SolidColorBrush x:Key="TabItemHighlightBackgroundBrushKey"         Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}"/>
  <SolidColorBrush x:Key="DataGridColumnHeaderBackgroundBrushKey"     Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
  <SolidColorBrush x:Key="ButtonBackgroundBrushKey"                   Color="{DynamicResource {x:Static SystemColors.WindowColorKey}}"/>
  <SolidColorBrush x:Key="ButtonBorderBrushKey"                       Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}"/>
  <SolidColorBrush x:Key="ButtonMouseOverBorderBrushKey"              Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>
  <SolidColorBrush x:Key="ButtonMouseOverBackgroundBrushKey"          Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
  <SolidColorBrush x:Key="ButtonDefaultBackgroundBrushKey"            Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}"/>
  <SolidColorBrush x:Key="ButtonPressedBackgroundBrushKey"            Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}"/>

  <u:MarginFromLeft x:Key="MarginFromLeft"/>
  <Style TargetType="{x:Type Window}" x:Key="{x:Type Window}">
    <Setter Property="Foreground" Value="{DynamicResource WindowTextBrushKey}"/>
    <Setter Property="Background" Value="{DynamicResource WindowBrushKey}"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}">
            <AdornerDecorator>
              <ContentPresenter/>
            </AdornerDecorator>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!--<Style.Triggers>
      <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Window}">
              <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                <Grid>
                  <AdornerDecorator>
                    <ContentPresenter/>
                  </AdornerDecorator>
                  <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                  </MultiTrigger.Conditions>
                  <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>-->
  </Style>

  <!--<a:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
  <a:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
  <a:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter"/>
  <a:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter"/>
  <a:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
  <a:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter"/>
  <a:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter"/>
  <Style TargetType="{x:Type a:LayoutAnchorablePaneControl}" x:Key="{x:Type a:LayoutAnchorablePaneControl}">
    <Setter Property="TabStripPlacement" Value="Bottom"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Foreground" Value="{DynamicResource ControlTextBrushKey}"/>
    <Setter Property="Padding" Value="4,4,4,4"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkBrushKey}"/>
    <Setter Property="Background" Value="{DynamicResource ControlBrushKey}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type a:LayoutAnchorablePaneControl}">
          <Border>
            <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
              <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="2"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border Background="Transparent" Grid.RowSpan="2"/>
              <Border x:Name="ContentPanel" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}"
                    Grid.Column="0" 
                    KeyboardNavigation.DirectionalNavigation="Contained" 
                    Grid.Row="0" 
                    KeyboardNavigation.TabIndex="2"
                    KeyboardNavigation.TabNavigation="Cycle">
                <ContentPresenter x:Name="PART_SelectedContentHost"
                                ContentSource="SelectedContent" 
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Border>
              <a:AnchorablePaneTabPanel x:Name="HeaderPanel"
                                      Margin="0,0,0,0"
                                      IsItemsHost="true"
                                      Grid.Row="2"
                                      KeyboardNavigation.TabIndex="1"
                                      Panel.ZIndex="1"/>
              <Rectangle Name="Line" Fill="{DynamicResource ControlDarkBrushKey}" Grid.Row="1"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource GrayTextBrushKey}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="Line" Property="Fill" Value="{DynamicResource TabItemHighlightBackgroundBrushKey}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}">
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
          <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
          <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
          <Setter Property="Padding" Value="5,0,5,0"/>
          <Setter Property="BorderBrush" Value="{DynamicResource ControlDarkBrushKey}"/>
          <Setter Property="Background" Value="{DynamicResource ControlDarkBrushKey}"/>
          <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
          <Setter Property="VerticalContentAlignment" Value="Stretch"/>
          <Setter Property="Foreground" Value="{DynamicResource ControlTextBrushKey}"/>
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TabItem}">
                <Grid SnapsToDevicePixels="true">
                  <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0"
                    Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                    <ContentPresenter x:Name="Content" ContentSource="Header"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                  </Border>
                </Grid>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TabItemMouseOverBackgroundBrushKey}"/>
                  </Trigger>
                  <Trigger Property="IsSelected" Value="true">
                    <Setter Property="Panel.ZIndex" Value="1"/>
                    <Setter Property="Background"  TargetName="Bd" Value="{DynamicResource TabItemHighlightBackgroundBrushKey}"/>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TabItemHighlightBackgroundBrushKey}"/>
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="false"/>
                      <Condition Property="IsMouseOver" Value="true"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource TabItemMouseOverBackgroundBrushKey}"/>
                  </MultiTrigger>
                  <Trigger Property="TabStripPlacement" Value="Bottom">
                    <Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1"/>
                  </Trigger>
                  <Trigger Property="TabStripPlacement" Value="Left">
                    <Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>
                  </Trigger>
                  <Trigger Property="TabStripPlacement" Value="Right">
                    <Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>
                  </Trigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="true"/>
                      <Condition Property="TabStripPlacement" Value="Top"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Margin" Value="0,0,0,0"/>
                    <Setter Property="Margin" TargetName="Content" Value="0,0,0,0"/>
                  </MultiTrigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="true"/>
                      <Condition Property="TabStripPlacement" Value="Left"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Margin" Value="-2,-2,-1,-2"/>
                    <Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
                  </MultiTrigger>
                  <MultiTrigger>
                    <MultiTrigger.Conditions>
                      <Condition Property="IsSelected" Value="true"/>
                      <Condition Property="TabStripPlacement" Value="Right"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Margin" Value="-1,-2,-2,-2"/>
                    <Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
                  </MultiTrigger>
                  <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource InactiveBorderColorKey}"/>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource InactiveBorderColorKey}"/>
                    <Setter Property="Foreground" Value="{DynamicResource GrayTextBrushKey}"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
              <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <a:LayoutAnchorableTabItem Model="{Binding}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <a:LayoutAnchorableControl Model="{Binding}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--<Style TargetType="{x:Type a:LayoutAnchorableControl}">
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type a:LayoutAnchorableControl}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  KeyboardNavigation.TabNavigation="Cycle">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Border x:Name="Header">
                <a:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
              <ContentPresenter
                  Grid.Row="1"
                  FlowDirection="{TemplateBinding FlowDirection}"
                  Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True"/>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Visibility" Value="Collapsed" TargetName="Header"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--<Style TargetType="{x:Type a:AnchorablePaneTitle}">
    <Setter Property="BorderBrush" Value="{DynamicResource ControlBrushKey}"/>
    <Setter Property="Background" Value="{DynamicResource ControlBrushKey}"/>
    <Setter Property="Foreground" Value="{DynamicResource ControlTextBrushKey}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <a:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                  </Grid.ColumnDefinitions>
                  <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                    Margin="5,0,0,0"/>
                  <Rectangle Height="6" Margin="5,0,5,0" Grid.Column="1"
                             VerticalAlignment="Center"
                             Opacity="0.5"
                             UseLayoutRounding="True">
                    <Rectangle.Fill>
                      <DrawingBrush TileMode="Tile" Stretch="None"
                                    Viewport="1,1,4,4" ViewportUnits="Absolute"
                                    Viewbox="0,0,4,5"  ViewboxUnits="Absolute">
                        <DrawingBrush.Drawing>
                          <DrawingGroup>
                            <DrawingGroup.GuidelineSet>
                              <GuidelineSet GuidelinesX="0.1"/>
                            </DrawingGroup.GuidelineSet>
                            <DrawingGroup.Children>
                              <GeometryDrawing Geometry="M 0 0 L 1 0 M 2 2 L 3 2 M 0 4 L 1 4">
                                <GeometryDrawing.Pen>
                                  <Pen Brush="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Foreground}" Thickness="1"/>
                                </GeometryDrawing.Pen>
                              </GeometryDrawing>
                            </DrawingGroup.Children>
                          </DrawingGroup>
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Grid>
              </a:DropDownControlArea>
              <a:DropDownButton Height="17" Width="17" Padding="0"
                    Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                    Focusable="False"
                    Grid.Column="1"
                    DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                    DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                    ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
                <Viewbox Width="16" Height="16" UseLayoutRounding="True">
                  <Rectangle Width="16" Height="16">
                    <Rectangle.Fill>
                      <DrawingBrush>
                        <DrawingBrush.Drawing>
                          <DrawingGroup>
                            <DrawingGroup.Children>
                              <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                              <GeometryDrawing Brush="{DynamicResource ControlTextBrushKey}" Geometry="F1M8,10L4,6 12,6z" />
                            </DrawingGroup.Children>
                          </DrawingGroup>
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Viewbox>
              </a:DropDownButton>
              <Button x:Name="PART_AutoHidePin" Height="17" Width="17" Padding="0"
                      Grid.Column="2" 
                      Focusable="False"
                      Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                      Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}">
                <Viewbox Width="16" Height="16" SnapsToDevicePixels="True">
                  <Rectangle Width="16" Height="16">
                    <Rectangle.Fill>
                      <DrawingBrush>
                        <DrawingBrush.Drawing>
                          <DrawingGroup>
                            <DrawingGroup.Children>
                              <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z">
                                <GeometryDrawing.Pen>
                                  <Pen Brush="#00FFFFFF" Thickness="1" DashCap="Flat" />
                                </GeometryDrawing.Pen>
                              </GeometryDrawing>
                              <GeometryDrawing Brush="{DynamicResource ControlTextBrushKey}" Geometry="F1M9,8L7,8 7,4 9,4z M11,3L6,3 6,9 5,9 5,10 6,10 7,10 8,10 8,13 9,13 9,10 11,10 12,10 12,9 11,9z" />
                            </DrawingGroup.Children>
                          </DrawingGroup>
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Viewbox>
              </Button>
              <Button x:Name="PART_HidePin" Height="17" Width="17" Padding="0"
                      Grid.Column="3" 
                      Focusable="False"
                      Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                      Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                      ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}">
               <Viewbox Width="16" Height="16">
                  <Rectangle Width="16" Height="16">
                    <Rectangle.Fill>
                      <DrawingBrush>
                        <DrawingBrush.Drawing>
                          <DrawingGroup>
                            <DrawingGroup.Children>
                              <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
                              <GeometryDrawing Brush="{DynamicResource ControlTextBrushKey}" Geometry="F1M4,5L6,5 8,7 10,5 12,5 9,8 12,11 10,11 8,9 6,11 4,11 7,8z" />
                            </DrawingGroup.Children>
                          </DrawingGroup>
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Viewbox>
              </Button>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
              <Setter Property="LayoutTransform" TargetName="PART_AutoHidePin">
                <Setter.Value>
                  <RotateTransform Angle="90"/>
                </Setter.Value>
              </Setter>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--<Style TargetType="{x:Type a:LayoutAnchorableTabItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type a:LayoutAnchorableTabItem}">
          <a:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <Grid>
                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                  ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type a:DockingManager}, Mode=FindAncestor}}"
                                  ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type a:DockingManager}, Mode=FindAncestor}}"/>
                <a:DropDownControlArea 
                    Grid.Column="0"
                    DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                    DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Grid>
            </Border>
          </a:DropDownControlArea>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--<Style x:Key="{x:Type a:LayoutDocumentPaneControl}" TargetType="{x:Type a:LayoutDocumentPaneControl}" BasedOn="{StaticResource {x:Type TabControl}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type a:LayoutDocumentPaneControl}">
          <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            --><!--Following border is required to catch mouse events--><!--
            <Border Background="Transparent" Grid.RowSpan="2"/>
            <Grid Panel.ZIndex="1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <a:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
              <a:DropDownButton
                  x:Name="MenuDropDownButton"
                  Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                  Focusable="False"
                  Grid.Column="1">
                <a:DropDownButton.DropDownContextMenu>
                  <a:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                    <a:ContextMenuEx.ItemContainerStyle>
                      <Style TargetType="{x:Type a:MenuItemEx}" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                        <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                        <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                        <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                        <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
                      </Style>
                    </a:ContextMenuEx.ItemContainerStyle>
                  </a:ContextMenuEx>
                </a:DropDownButton.DropDownContextMenu>
                <Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinDocMenu.png"/>
              </a:DropDownButton>
            </Grid>
            <Border x:Name="ContentPanel" 
                    VerticalAlignment="Stretch" 
                    HorizontalAlignment="Stretch"  
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}" 
                    Grid.Column="0" 
                    KeyboardNavigation.DirectionalNavigation="Contained" 
                    Grid.Row="1"
                    KeyboardNavigation.TabIndex="2" 
                    KeyboardNavigation.TabNavigation="Cycle">
              <ContentPresenter x:Name="PART_SelectedContentHost" 
                                ContentSource="SelectedContent" 
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
              <Setter Property="Visibility" Value="Collapsed" TargetName="MenuDropDownButton" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
          <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}}"/>
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
          <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <a:LayoutDocumentTabItem Model="{Binding}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <a:LayoutDocumentControl Model="{Binding}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  <!--<Style x:Key="AnchorablePaneControlStyle" TargetType="{x:Type a:LayoutAnchorablePaneControl}">
        <Setter Property="TabStripPlacement" Value="Bottom"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type a:LayoutAnchorablePaneControl}">
                  <Border BorderBrush="Red" BorderThickness="1">
                    <Grid ClipToBounds="true" 
                          SnapsToDevicePixels="true" 
                          KeyboardNavigation.TabNavigation="Local"
                          >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        --><!--Following border is required to catch mouse events--><!--
                        <Border Background="Transparent" Grid.RowSpan="2"/>
                        <Border x:Name="ContentPanel" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}"
                                Grid.Column="0" 
                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                Grid.Row="0" 
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <a:AnchorablePaneTabPanel x:Name="HeaderPanel" Margin="2,0,2,2" IsItemsHost="true" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                    </Grid>
                  </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <a:LayoutAnchorableTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <a:LayoutAnchorableControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
  <!--<ControlTemplate x:Key="AnchorSideTemplate" TargetType="{x:Type a:LayoutAnchorSideControl}">
    <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
      <ItemsControl.ItemsPanel>
        <ItemsPanelTemplate>
          <StackPanel Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type a:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={StaticResource AnchorSideToOrientationConverter}}"/>
        </ItemsPanelTemplate>
      </ItemsControl.ItemsPanel>
    </ItemsControl>
  </ControlTemplate>-->
  <!--<Style x:Key="{x:Type a:DockingManager}" TargetType="{x:Type a:DockingManager}">
    <Setter Property="DocumentPaneControlStyle" Value="{StaticResource {x:Type a:LayoutDocumentPaneControl}}"/>
    <Setter Property="AnchorablePaneControlStyle" Value="{StaticResource {x:Type a:LayoutAnchorablePaneControl}}"/>
    <Setter Property="AnchorSideTemplate" Value="{StaticResource AnchorSideTemplate}"/>
    <Setter Property="AnchorGroupTemplate" Value="{StaticResource AnchorGroupTemplate}"/>
    <Setter Property="AnchorTemplate" Value="{StaticResource AnchorTemplate}"/>
    <Setter Property="DocumentHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}"/>
    <Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AnchorableHeaderTemplate}"/>
    <Setter Property="DocumentTitleTemplate" Value="{StaticResource DocumentTitleTemplate}"/>
    <Setter Property="AnchorableTitleTemplate" Value="{StaticResource AnchorableTitleTemplate}"/>
    <Setter Property="AnchorableContextMenu" Value="{StaticResource AnchorableContextMenu}"/>
    <Setter Property="DocumentContextMenu" Value="{StaticResource DocumentContextMenu}"/>
    <Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}"/>
    <Setter Property="IconContentTemplate" Value="{StaticResource IconContentTemplate}"/>
    <Setter Property="BorderBrush" Value="Red"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type a:DockingManager}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid FlowDirection="LeftToRight">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Border BorderThickness="0" BorderBrush="Green" Grid.Column="1" Grid.Row="1">
                <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" />
              </Border>
              <Border BorderThickness="0" BorderBrush="Blue" Grid.Column="2" Grid.Row="1">
                <ContentPresenter Content="{TemplateBinding RightSidePanel}"/>
              </Border>
              <Border BorderThickness="0" BorderBrush="BlueViolet" Grid.Column="0" Grid.Row="1">
                <ContentPresenter Content="{TemplateBinding LeftSidePanel}"/>
              </Border>
              <Border BorderThickness="0" BorderBrush="Yellow" Grid.Column="1" Grid.Row="0">
                <ContentPresenter Content="{TemplateBinding TopSidePanel}"/>
              </Border>
              <Border BorderThickness="0" BorderBrush="Red" Grid.Column="1" Grid.Row="2">
                <ContentPresenter Content="{TemplateBinding BottomSidePanel}"/>
              </Border>
              <ContentPresenter 
                  x:Name="PART_AutoHideArea"
                  Content="{TemplateBinding AutoHideWindow}"
                  VerticalAlignment="{TemplateBinding VerticalAlignment}"
                  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                  Grid.Column="1" Grid.Row="1"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->

  <DrawingGroup x:Key="PictureBackward">
    <DrawingGroup.Children>
      <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
      <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M15,8C15,11.866 11.866,15 8,15 4.134,15 1,11.866 1,8 1,4.134 4.134,1 8,1 11.866,1 15,4.134 15,8" />
      <GeometryDrawing Brush="#FF00539C" Geometry="F1M4,8L7,5 9,5 7,7 12,7 12,9 7,9 9,11 7,11z M2,8C2,11.247 4.755,14 8,14 11.245,14 14,11.247 14,8 14,4.756 11.245,2 8,2 4.755,2 2,4.756 2,8" />
      <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M4,8L7,5 9,5 7,7 12,7 12,9 7,9 9,11 7,11z" />
    </DrawingGroup.Children>
  </DrawingGroup>
  <DrawingGroup x:Key="PictureForward">
    <DrawingGroup.Children>
      <GeometryDrawing Brush="#00FFFFFF" Geometry="F1M16,16L0,16 0,0 16,0z" />
      <GeometryDrawing Brush="#FFF6F6F6" Geometry="F1M15,8C15,11.866 11.866,15 8,15 4.134,15 1,11.866 1,8 1,4.134 4.134,1 8,1 11.866,1 15,4.134 15,8" />
      <GeometryDrawing Brush="#FF00539C" Geometry="F1M9,11L7,11 9,9 4,9 4,7 9,7 7,5 9,5 12,8z M8,2C4.755,2 2,4.756 2,8 2,11.247 4.755,14 8,14 11.245,14 14,11.247 14,8 14,4.756 11.245,2 8,2" />
      <GeometryDrawing Brush="#FFF0EFF1" Geometry="F1M9,11L7,11 9,9 4,9 4,7 9,7 7,5 9,5 12,8z" />
    </DrawingGroup.Children>
  </DrawingGroup>

</ResourceDictionary>